import os
import logging
from pprint import pprint

import dotenv
import instructor
import openai
import genanki
from pydantic import BaseModel, Field
from google.cloud import texttospeech
from google.api_core.client_options import ClientOptions

dotenv.load_dotenv()

# ----------------------------------------------------------------------------------
# Vocabulary Card Generator for Anki Deck
# This script generates vocabulary cards for an Anki deck using an LLM.
# It uses the OpenRouter API to access the LLM and generate structured data
# for each vocabulary word.
# ----------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------
# Configuration
# ----------------------------------------------------------------------------------

# LLM model to use for generating content
# model = "anthropic/claude-sonnet-4"
model = "openai/gpt-4.1"

# Example list of Korean words
# korean_words = ['정', '눈치', '한', '답답하다', '시원하다']
korean_words = ['정', '눈치']

# Audio configuration
# Set to True if you want to generate audio for each word
generate_audio = True

# Anki configuration
model_id = 3959306710
deck_id = 4766483959
deck_name = 'Test Deck AI'

# Output configuration
output_dir = "output"
anki_output_file = f"{deck_name.replace(' ', '')}.apkg"
media_dir = f"{output_dir}/media"
# Ensure output directories exist
if not os.path.exists(output_dir):
    os.makedirs(output_dir)
if not os.path.exists(media_dir):
    os.makedirs(media_dir)


class CardNote(BaseModel):
    """Structured data model for vocabulary cards content generated by the LLM.
    This model defines the fields that will be used to create vocabulary cards
    in Anki.
    """
    type: str = Field(..., description="Type of the word (noun, verb, etc.)")
    explanation: str = Field(...,
                             description="Explanation of the word in English")
    example_sentences: list[str] = Field(
        ..., description="List of example sentences using the word in English and Korean in the following format: [Sentence in Korean] - [Setnence translation in English]. If not applicable, output an empty list.")
    sino_roots: list[str] = Field(..., description="If applicable, provide list of sino-Korean root words in the following format: [Hanguel] ([Hanja Character]) - [Meaning in English]. If not applicable, output an empty list.")
    korean_roots: list[str] = Field(
        ..., description="If applicable, provide list of native Korean root words in the following format: [Hanguel] - [Meaning in English]. If not applicable, output an empty list.")
    cultural_note: str = Field(
        ..., description="Cultural note about the word if it is sensible in a language class to include it. If not, output an empty string.")


# Set up logging
logging.basicConfig(filename=f"{output_dir}/deck_gen.log",
                    format='%(asctime)s %(message)s',
                    filemode='w')
logger = logging.getLogger()
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.INFO)

# ----------------------------------------------------------------------------------
# Initialize Clients for LLM and Text-to-Speech
# ----------------------------------------------------------------------------------

# Set the LLM model to use for generating vocabulary cards
client = openai.OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=dotenv.get_key(".env", "OPENROUTER_API_KEY"),
)
instructor_client = instructor.from_openai(client)

# Set up text-to-speech client using Google Cloud Text-to-Speech
client_options = ClientOptions(
    api_key=dotenv.get_key(".env", "GOOGLE_API_KEY"))
google_tts_client = texttospeech.TextToSpeechClient(
    client_options=client_options)

# ----------------------------------------------------------------------------------
# Functions
# ----------------------------------------------------------------------------------


def gen_card_note(word: str) -> CardNote:
    card_note = instructor_client.chat.completions.create(
        model=model,
        response_model=CardNote,
        messages=[
            {
                "role": "system",
                "content": "You are an expert language teacher. Your task is to help students understand and learn vocabulary words."
            },
            {
                "role": "user",
                "content": f"Generate content for the word {word}."
            },
        ],
    )
    return card_note


def gen_card_note_openai(word: str) -> CardNote:
    # Extract structured data from natural language
    res = client.responses.parse(
        model=model,
        input=[
            {
                "role": "system",
                "content": "You are an expert language teacher. Your task is to help students understand and learn vocabulary words."
            },
            {
                "role": "user",
                "content": f"Generate content for the word {word}."
            },
        ],
        text_format=CardNote
    )
    return res.output_parsed


def gen_audio(word: str, path: str) -> str:
    # Generate audio for each word using Google Text-to-Speech
    synthesis_input = texttospeech.SynthesisInput(text=word)
    voice = texttospeech.VoiceSelectionParams(
        language_code="ko-KR",
        ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL,
    )
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3)
    response = google_tts_client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config)
    with open(path, "wb") as out:
        out.write(response.audio_content)
        logging.info(
            f"[INFO] Audio content written to file '{word}.mp3'")


def gen_anki_note(note_id: int, model: genanki.model, data: dict, anki_fields: list[dict]) -> genanki.Note:
    """Generate an Anki note for a given word."""
    # Prepare fields for the Anki note
    note_fields = []
    for field in anki_fields:
        field_name = field['name']
        if field_name in data:
            if field_name == 'audio':
                note_fields.append(f"[sound:{data[field_name]}]")
            elif type(data[field_name]) == str:
                note_fields.append(data[field_name])
            elif type(data[field_name]) == list:
                # Join list items with a <br> tag for Anki
                note_fields.append('<br>'.join(data[field_name]))
            else:
                logger.error(
                    f"[ERROR] Unsupported field type for {field_name}: {type(data[field_name])}")

    note = genanki.Note(
        guid=note_id,
        model=model,
        fields=note_fields
    )
    return note


def main():
    # Define Anki model and deck
    anki_fields = [{'name': x.replace('_', ' ')}
                   for x in CardNote.model_fields.keys()]
    anki_fields.insert(0, {'name': 'word'})
    if generate_audio:
        # Add audio field for the back of the card
        anki_fields.append({'name': 'audio'})
    anki_model = genanki.Model(
        model_id,
        deck_name,
        fields=anki_fields,
        templates=[
            {
                'name': 'Card 1',
                'qfmt': '{{word}}',
                'afmt': '{{FrontSide}}'
            }
        ]
    )

    deck = genanki.Deck(deck_id, deck_name)

    # Process each Korean word to generate card notes along with audio
    audio_file_paths = []
    for i in range(len(korean_words)):
        word = korean_words[i]
        note_id = i + 1
        logging.info(f"[INFO] Generating content for word: {word}")
        card_note_ai = gen_card_note(word)
        dct = card_note_ai.model_dump()
        dct = {key.replace('_', ' '): value for key, value in dct.items()}

        dct['word'] = word

        # Generate audio for each word using Google Text-to-Speech
        if generate_audio:
            audio_basename = f"{deck_name.replace(' ', '')}-{note_id}.mp3"
            audio_path = os.path.join(media_dir, audio_basename)
            gen_audio(word, audio_path)
            dct['audio'] = audio_basename
            audio_file_paths.append(audio_path)

        # Create Anki note
        note = gen_anki_note(
            note_id=note_id,
            model=anki_model,
            data=dct,
            anki_fields=anki_fields)

        deck.add_note(note)

    # Save the Anki deck to a file
    package = genanki.Package(deck)
    package.media_files = audio_file_paths
    package.write_to_file(os.path.join(output_dir, anki_output_file))


if __name__ == "__main__":
    main()
