import os
import logging
import dotenv
from pydantic import BaseModel, Field
from archive.deck_generator_prev import DeckGenerator

output_dir = "output"

# Set up logging
os.makedirs(output_dir, exist_ok=True)
logging.basicConfig(filename=f"{output_dir}/deck_gen.log",
                    format='%(asctime)s %(message)s',
                    filemode='w')
logger = logging.getLogger()
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.INFO)

# AI Configuration
ai_config = DeckGenerator.AIConfig(
    open_router_key=dotenv.get_key(".env", "OPENROUTER_API_KEY"),
    google_tts_key=dotenv.get_key(".env", "GOOGLE_API_KEY"),
    model="openai/gpt-4.1",
    temperature=0.3
)

# Anki Configuration
anki_config = DeckGenerator.AnkiConfig(
    model_id=1234567890,
    deck_id=9876543210,
    deck_name="Test Korean Deck"
)

# Define the structured data model for AI output
class CardNote(BaseModel):
    """Structured data model for vocabulary cards content generated by the LLM.
    This model defines the fields that will be used to create vocabulary cards
    in Anki.
    """
    type: str = Field(..., description="Type of the word (noun, verb, etc.)")
    explanation: str = Field(...,
                             description="Explanation of the word in English")
    example_sentences: list[str] = Field(
        ..., description="List of example sentences using the word in English and Korean in the following format: [Sentence in Korean] - [Setnence translation in English]. If not applicable, output an empty list.")
    sino_roots: list[str] = Field(..., description="If applicable, provide list of sino-Korean root words in the following format: [Hanguel] ([Hanja Character]) - [Meaning in English]. If not applicable, output an empty list.")
    korean_roots: list[str] = Field(
        ..., description="If applicable, provide list of native Korean root words in the following format: [Hanguel] - [Meaning in English]. If not applicable, output an empty list.")
    cultural_note: str = Field(
        ..., description="Cultural note about the word if it is sensible in a language class to include it. If not, output an empty string.")


deck_generator = DeckGenerator(
    ai_schema=CardNote,
    ai_config=ai_config,
    anki_config=anki_config,
    gen_audio=True
)

deck_generator.gen_deck(
    items=["안녕하세요", "사랑해요", "감사합니다"],
    output_dir=output_dir,
)
